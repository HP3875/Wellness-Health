generator client {
  provider = "prisma-client-js"
}


datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:HarshPatel@3875@db.tppdetydbomakwbmnsgd.supabase.co:5432/postgres?schema=auth"
}

model audit_log_entries {
  instance_id String?   @db.Uuid
  id          String    @id @db.Uuid
  payload     Json?     @db.Json
  created_at  DateTime? @db.Timestamptz(6)
  ip_address  String    @default("") @db.VarChar(64)

  @@index([instance_id], map: "audit_logs_instance_id_idx")
}

model flow_state {
  id                     String                @id @db.Uuid
  user_id                String?               @db.Uuid
  auth_code              String
  code_challenge_method  code_challenge_method
  code_challenge         String
  provider_type          String
  provider_access_token  String?
  provider_refresh_token String?
  created_at             DateTime?             @db.Timestamptz(6)
  updated_at             DateTime?             @db.Timestamptz(6)
  authentication_method  String
  auth_code_issued_at    DateTime?             @db.Timestamptz(6)

  @@index([created_at(sort: Desc)])
  @@index([auth_code], map: "idx_auth_code")
  @@index([user_id, authentication_method], map: "idx_user_id_auth_method")
}

model users {
  id              String     @id @db.Uuid
  email           String?    @db.VarChar(255)
  phone           String?    @unique
  created_at      DateTime?  @db.Timestamptz(6)
  updated_at      DateTime?  @db.Timestamptz(6)
  is_anonymous    Boolean    @default(false)
  identities      identities[]
  sessions        sessions[]
  posts           posts[]

  @@index([id])
}
model sessions {
  id         String    @id @default(uuid()) @db.Uuid
  user_id    String    @db.Uuid
  token      String
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  updated_at DateTime  @updatedAt @db.Timestamptz(6)
  user       users     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}
model identities {
  id         String    @id @default(uuid()) @db.Uuid
  user_id    String    @db.Uuid
  provider   String
  providerId String
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  updated_at DateTime  @updatedAt @db.Timestamptz(6)
  user       users     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@index([provider, providerId])
}

model posts {
  id         String    @id @default(uuid()) @db.Uuid
  title      String
  content    String
  authorId   String    @db.Uuid
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  updated_at DateTime  @updatedAt @db.Timestamptz(6)
  author     users     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([authorId])
}

enum code_challenge_method {
  s256
  plain
}
